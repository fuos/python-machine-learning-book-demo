
```python
# 导入sklearn、numpy
from sklearn import datasets
import numpy as np
```

```python
# 加载鸢尾花数据集（150个样本）
iris = datasets.load_iris()
```

```python
print(iris.feature_names,iris.data,iris.target_names,iris.target)
```

['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

[[5.1 3.5 1.4 0.2]
 [4.9 3.  1.4 0.2]
 [4.7 3.2 1.3 0.2]
 [4.6 3.1 1.5 0.2]
 [5.  3.6 1.4 0.2]
 [5.4 3.9 1.7 0.4]
 [4.6 3.4 1.4 0.3]
 [5.  3.4 1.5 0.2]
 [4.4 2.9 1.4 0.2]
 [4.9 3.1 1.5 0.1]
 [5.4 3.7 1.5 0.2]
 [4.8 3.4 1.6 0.2]
 [4.8 3.  1.4 0.1]
 [4.3 3.  1.1 0.1]
 [5.8 4.  1.2 0.2]
 [5.7 4.4 1.5 0.4]
 [5.4 3.9 1.3 0.4]
 [5.1 3.5 1.4 0.3]
 [5.7 3.8 1.7 0.3]
 [5.1 3.8 1.5 0.3]
 [5.4 3.4 1.7 0.2]
 [5.1 3.7 1.5 0.4]
 [4.6 3.6 1.  0.2]
 [5.1 3.3 1.7 0.5]
 [4.8 3.4 1.9 0.2]
 [5.  3.  1.6 0.2]
 [5.  3.4 1.6 0.4]
 [5.2 3.5 1.5 0.2]
 [5.2 3.4 1.4 0.2]
 [4.7 3.2 1.6 0.2]
 [4.8 3.1 1.6 0.2]
 [5.4 3.4 1.5 0.4]
 [5.2 4.1 1.5 0.1]
 [5.5 4.2 1.4 0.2]
 [4.9 3.1 1.5 0.1]
 [5.  3.2 1.2 0.2]
 [5.5 3.5 1.3 0.2]
 [4.9 3.1 1.5 0.1]
 [4.4 3.  1.3 0.2]
 [5.1 3.4 1.5 0.2]
 [5.  3.5 1.3 0.3]
 [4.5 2.3 1.3 0.3]
 [4.4 3.2 1.3 0.2]
 [5.  3.5 1.6 0.6]
 [5.1 3.8 1.9 0.4]
 [4.8 3.  1.4 0.3]
 [5.1 3.8 1.6 0.2]
 [4.6 3.2 1.4 0.2]
 [5.3 3.7 1.5 0.2]
 [5.  3.3 1.4 0.2]
 [7.  3.2 4.7 1.4]
 [6.4 3.2 4.5 1.5]
 [6.9 3.1 4.9 1.5]
 [5.5 2.3 4.  1.3]
 [6.5 2.8 4.6 1.5]
 [5.7 2.8 4.5 1.3]
 [6.3 3.3 4.7 1.6]
 [4.9 2.4 3.3 1. ]
 [6.6 2.9 4.6 1.3]
 [5.2 2.7 3.9 1.4]
 [5.  2.  3.5 1. ]
 [5.9 3.  4.2 1.5]
 [6.  2.2 4.  1. ]
 [6.1 2.9 4.7 1.4]
 [5.6 2.9 3.6 1.3]
 [6.7 3.1 4.4 1.4]
 [5.6 3.  4.5 1.5]
 [5.8 2.7 4.1 1. ]
 [6.2 2.2 4.5 1.5]
 [5.6 2.5 3.9 1.1]
 [5.9 3.2 4.8 1.8]
 [6.1 2.8 4.  1.3]
 [6.3 2.5 4.9 1.5]
 [6.1 2.8 4.7 1.2]
 [6.4 2.9 4.3 1.3]
 [6.6 3.  4.4 1.4]
 [6.8 2.8 4.8 1.4]
 [6.7 3.  5.  1.7]
 [6.  2.9 4.5 1.5]
 [5.7 2.6 3.5 1. ]
 [5.5 2.4 3.8 1.1]
 [5.5 2.4 3.7 1. ]
 [5.8 2.7 3.9 1.2]
 [6.  2.7 5.1 1.6]
 [5.4 3.  4.5 1.5]
 [6.  3.4 4.5 1.6]
 [6.7 3.1 4.7 1.5]
 [6.3 2.3 4.4 1.3]
 [5.6 3.  4.1 1.3]
 [5.5 2.5 4.  1.3]
 [5.5 2.6 4.4 1.2]
 [6.1 3.  4.6 1.4]
 [5.8 2.6 4.  1.2]
 [5.  2.3 3.3 1. ]
 [5.6 2.7 4.2 1.3]
 [5.7 3.  4.2 1.2]
 [5.7 2.9 4.2 1.3]
 [6.2 2.9 4.3 1.3]
 [5.1 2.5 3.  1.1]
 [5.7 2.8 4.1 1.3]
 [6.3 3.3 6.  2.5]
 [5.8 2.7 5.1 1.9]
 [7.1 3.  5.9 2.1]
 [6.3 2.9 5.6 1.8]
 [6.5 3.  5.8 2.2]
 [7.6 3.  6.6 2.1]
 [4.9 2.5 4.5 1.7]
 [7.3 2.9 6.3 1.8]
 [6.7 2.5 5.8 1.8]
 [7.2 3.6 6.1 2.5]
 [6.5 3.2 5.1 2. ]
 [6.4 2.7 5.3 1.9]
 [6.8 3.  5.5 2.1]
 [5.7 2.5 5.  2. ]
 [5.8 2.8 5.1 2.4]
 [6.4 3.2 5.3 2.3]
 [6.5 3.  5.5 1.8]
 [7.7 3.8 6.7 2.2]
 [7.7 2.6 6.9 2.3]
 [6.  2.2 5.  1.5]
 [6.9 3.2 5.7 2.3]
 [5.6 2.8 4.9 2. ]
 [7.7 2.8 6.7 2. ]
 [6.3 2.7 4.9 1.8]
 [6.7 3.3 5.7 2.1]
 [7.2 3.2 6.  1.8]
 [6.2 2.8 4.8 1.8]
 [6.1 3.  4.9 1.8]
 [6.4 2.8 5.6 2.1]
 [7.2 3.  5.8 1.6]
 [7.4 2.8 6.1 1.9]
 [7.9 3.8 6.4 2. ]
 [6.4 2.8 5.6 2.2]
 [6.3 2.8 5.1 1.5]
 [6.1 2.6 5.6 1.4]
 [7.7 3.  6.1 2.3]
 [6.3 3.4 5.6 2.4]
 [6.4 3.1 5.5 1.8]
 [6.  3.  4.8 1.8]
 [6.9 3.1 5.4 2.1]
 [6.7 3.1 5.6 2.4]
 [6.9 3.1 5.1 2.3]
 [5.8 2.7 5.1 1.9]
 [6.8 3.2 5.9 2.3]
 [6.7 3.3 5.7 2.5]
 [6.7 3.  5.2 2.3]
 [6.3 2.5 5.  1.9]
 [6.5 3.  5.2 2. ]
 [6.2 3.4 5.4 2.3]
 [5.9 3.  5.1 1.8]] 
 
 ['setosa' 'versicolor' 'virginica'] 
 
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]


```python
# 特征有4种，取2，3两列构建特征矩阵X

X = iris.data[:,[2,3]]
```


```python
print(X)
```

[[1.4 0.2]
 [1.4 0.2]
 [1.3 0.2]
 [1.5 0.2]
 [1.4 0.2]
 [1.7 0.4]
 [1.4 0.3]
 [1.5 0.2]
 [1.4 0.2]
 [1.5 0.1]
 [1.5 0.2]
 [1.6 0.2]
 [1.4 0.1]
 [1.1 0.1]
 [1.2 0.2]
 [1.5 0.4]
 [1.3 0.4]
 [1.4 0.3]
 [1.7 0.3]
 [1.5 0.3]
 [1.7 0.2]
 [1.5 0.4]
 [1.  0.2]
 [1.7 0.5]
 [1.9 0.2]
 [1.6 0.2]
 [1.6 0.4]
 [1.5 0.2]
 [1.4 0.2]
 [1.6 0.2]
 [1.6 0.2]
 [1.5 0.4]
 [1.5 0.1]
 [1.4 0.2]
 [1.5 0.1]
 [1.2 0.2]
 [1.3 0.2]
 [1.5 0.1]
 [1.3 0.2]
 [1.5 0.2]
 [1.3 0.3]
 [1.3 0.3]
 [1.3 0.2]
 [1.6 0.6]
 [1.9 0.4]
 [1.4 0.3]
 [1.6 0.2]
 [1.4 0.2]
 [1.5 0.2]
 [1.4 0.2]
 [4.7 1.4]
 [4.5 1.5]
 [4.9 1.5]
 [4.  1.3]
 [4.6 1.5]
 [4.5 1.3]
 [4.7 1.6]
 [3.3 1. ]
 [4.6 1.3]
 [3.9 1.4]
 [3.5 1. ]
 [4.2 1.5]
 [4.  1. ]
 [4.7 1.4]
 [3.6 1.3]
 [4.4 1.4]
 [4.5 1.5]
 [4.1 1. ]
 [4.5 1.5]
 [3.9 1.1]
 [4.8 1.8]
 [4.  1.3]
 [4.9 1.5]
 [4.7 1.2]
 [4.3 1.3]
 [4.4 1.4]
 [4.8 1.4]
 [5.  1.7]
 [4.5 1.5]
 [3.5 1. ]
 [3.8 1.1]
 [3.7 1. ]
 [3.9 1.2]
 [5.1 1.6]
 [4.5 1.5]
 [4.5 1.6]
 [4.7 1.5]
 [4.4 1.3]
 [4.1 1.3]
 [4.  1.3]
 [4.4 1.2]
 [4.6 1.4]
 [4.  1.2]
 [3.3 1. ]
 [4.2 1.3]
 [4.2 1.2]
 [4.2 1.3]
 [4.3 1.3]
 [3.  1.1]
 [4.1 1.3]
 [6.  2.5]
 [5.1 1.9]
 [5.9 2.1]
 [5.6 1.8]
 [5.8 2.2]
 [6.6 2.1]
 [4.5 1.7]
 [6.3 1.8]
 [5.8 1.8]
 [6.1 2.5]
 [5.1 2. ]
 [5.3 1.9]
 [5.5 2.1]
 [5.  2. ]
 [5.1 2.4]
 [5.3 2.3]
 [5.5 1.8]
 [6.7 2.2]
 [6.9 2.3]
 [5.  1.5]
 [5.7 2.3]
 [4.9 2. ]
 [6.7 2. ]
 [4.9 1.8]
 [5.7 2.1]
 [6.  1.8]
 [4.8 1.8]
 [4.9 1.8]
 [5.6 2.1]
 [5.8 1.6]
 [6.1 1.9]
 [6.4 2. ]
 [5.6 2.2]
 [5.1 1.5]
 [5.6 1.4]
 [6.1 2.3]
 [5.6 2.4]
 [5.5 1.8]
 [4.8 1.8]
 [5.4 2.1]
 [5.6 2.4]
 [5.1 2.3]
 [5.1 1.9]
 [5.9 2.3]
 [5.7 2.5]
 [5.2 2.3]
 [5.  1.9]
 [5.2 2. ]
 [5.4 2.3]
 [5.1 1.8]]
    

```python
# 目标
y = iris.target
```

```python
# 查看目标种类
np.unique(y)
```

array([0, 1, 2])


```python
print(y)
```

[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2
 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 2 2]
    

```python
from sklearn.cross_validation import train_test_split
```

# 训练和预测，按3:7拆分数据集

```python
X_train, X_test, y_train, y_test = train_test_split (
X, y, test_size = 0.3, random_state=0)
```

# 标准化处理

```python
from sklearn.preprocessing import StandardScaler
```

```python
sc = StandardScaler()
```

```python
sc.fit(X_train)
```

StandardScaler(copy=True, with_mean=True, with_std=True)


```python
X_train_std = sc.transform(X_train)
```

```python
X_test_std = sc.transform(X_test)
```

```python
# 标准化处理后结果
print(X_train_std);print("****************************");print(X_test_std)
```

    [[-0.18295039 -0.29145882]
     [ 0.93066067  0.73721938]
     [ 1.04202177  1.6373128 ]
     [ 0.6522579   0.35146505]
     [ 1.09770233  0.73721938]
     [ 0.03977182 -0.16287405]
     [ 1.26474398  1.38014325]
     [ 0.48521625  0.48004983]
     [-0.01590873 -0.16287405]
     [ 0.59657735  0.73721938]
     [ 0.70793846  0.35146505]
     [ 0.37385514  0.6086346 ]
     [ 0.6522579   0.86580415]
     [ 0.48521625  0.22288028]
     [ 0.76361901  0.99438893]
     [ 0.37385514  0.48004983]
     [-1.24088089 -1.32013702]
     [ 0.70793846  0.86580415]
     [ 0.20681348  0.0942955 ]
     [-0.12726983  0.0942955 ]
     [ 0.09545238  0.0942955 ]
     [ 0.42953569  0.22288028]
     [ 1.20906343  0.73721938]
     [-1.29656144 -1.32013702]
     [-1.51928365 -1.4487218 ]
     [ 0.81929956  0.86580415]
     [ 0.20681348 -0.03428927]
     [-1.18520034 -1.32013702]
     [-1.29656144 -1.06296747]
     [ 0.59657735  0.35146505]
     [-1.29656144 -1.32013702]
     [ 0.70793846  0.73721938]
     [-0.46135315 -0.16287405]
     [-1.35224199 -1.19155225]
     [ 0.37385514  0.35146505]
     [ 1.26474398  1.6373128 ]
     [ 0.20681348  0.0942955 ]
     [-1.35224199 -1.4487218 ]
     [ 1.15338288  1.1229737 ]
     [ 1.04202177  1.38014325]
     [ 1.09770233  1.25155848]
     [ 0.98634122  1.1229737 ]
     [-1.24088089 -1.32013702]
     [-1.24088089 -1.32013702]
     [ 0.70793846  0.99438893]
     [ 1.04202177  1.1229737 ]
     [-1.40792255 -1.19155225]
     [ 0.87498011  1.38014325]
     [-1.35224199 -1.32013702]
     [ 0.6522579   0.99438893]
     [ 0.87498011  1.1229737 ]
     [-1.40792255 -1.32013702]
     [-1.35224199 -1.32013702]
     [ 1.09770233  0.48004983]
     [-1.35224199 -1.19155225]
     [-1.40792255 -1.32013702]
     [-1.18520034 -1.06296747]
     [ 0.09545238  0.0942955 ]
     [ 1.15338288  1.38014325]
     [ 1.54314675  1.1229737 ]
     [-1.35224199 -1.32013702]
     [-1.29656144 -1.4487218 ]
     [-1.35224199 -1.32013702]
     [ 0.37385514  0.0942955 ]
     [ 0.31817459  0.22288028]
     [-1.4636031  -1.32013702]
     [-1.18520034 -0.9343827 ]
     [ 0.26249403  0.0942955 ]
     [-1.29656144 -1.06296747]
     [ 1.71018841  1.38014325]
     [-0.29431149 -0.29145882]
     [ 1.43178564  0.99438893]
     [ 0.31817459  0.22288028]
     [-1.29656144 -1.4487218 ]
     [ 0.5408968   0.73721938]
     [-1.4636031  -1.32013702]
     [ 1.5988273   0.99438893]
     [-1.29656144 -1.19155225]
     [-1.24088089 -1.32013702]
     [ 1.26474398  0.86580415]
     [-1.35224199 -1.32013702]
     [ 0.98634122  1.50872803]
     [ 0.15113293  0.0942955 ]
     [ 0.03977182 -0.03428927]
     [-0.18295039 -0.29145882]
     [ 0.81929956  1.38014325]
     [ 0.76361901  1.38014325]
     [ 0.59657735  0.35146505]
     [ 0.6522579   0.6086346 ]
     [-1.24088089 -1.32013702]
     [-0.07158928 -0.29145882]
     [ 0.98634122  1.50872803]
     [ 0.70793846  0.86580415]
     [-1.29656144 -1.32013702]
     [ 0.42953569  0.0942955 ]
     [ 0.15113293  0.0942955 ]
     [ 0.5408968   0.73721938]
     [ 0.31817459  0.0942955 ]
     [-1.40792255 -1.32013702]
     [-1.29656144 -1.06296747]
     [-1.29656144 -1.4487218 ]
     [ 0.98634122  0.73721938]
     [ 0.15113293 -0.29145882]
     [ 1.5988273   1.25155848]
     [-1.35224199 -1.32013702]]
    ****************************
    [[ 0.70793846  1.50872803]
     [ 0.09545238 -0.29145882]
     [-1.35224199 -1.32013702]
     [ 1.37610509  0.73721938]
     [-1.29656144 -1.32013702]
     [ 1.20906343  1.6373128 ]
     [-1.40792255 -1.19155225]
     [ 0.48521625  0.35146505]
     [ 0.5408968   0.22288028]
     [ 0.09545238  0.0942955 ]
     [ 0.98634122  0.22288028]
     [ 0.37385514  0.35146505]
     [ 0.48521625 -0.03428927]
     [ 0.42953569  0.35146505]
     [ 0.48521625  0.22288028]
     [-1.29656144 -1.4487218 ]
     [ 0.37385514  0.35146505]
     [ 0.31817459 -0.03428927]
     [-1.35224199 -1.19155225]
     [-1.40792255 -1.06296747]
     [ 0.59657735  0.99438893]
     [ 0.37385514  0.35146505]
     [-1.07383923 -1.32013702]
     [-1.35224199 -1.32013702]
     [ 0.5408968   0.73721938]
     [-1.57496421 -1.32013702]
     [-1.07383923 -1.06296747]
     [ 0.26249403  0.0942955 ]
     [-0.29431149 -0.29145882]
     [-1.24088089 -1.06296747]
     [ 0.93066067  0.73721938]
     [ 0.37385514  0.35146505]
     [-1.29656144 -1.32013702]
     [ 0.59657735  0.73721938]
     [ 0.98634122  1.25155848]
     [ 0.03977182  0.22288028]
     [-1.18520034 -1.19155225]
     [ 0.70793846  0.48004983]
     [ 0.20681348  0.35146505]
     [ 0.09545238 -0.03428927]
     [ 0.93066067  1.1229737 ]
     [-1.40792255 -1.32013702]
     [ 0.70793846  1.38014325]
     [-1.24088089 -0.80579792]
     [-1.29656144 -1.32013702]]
    

# 数据处理好之后，通过感知器的【fit方法】训练模型


```python
from sklearn.linear_model import Perceptron
```

```python
ppn = Perceptron(n_iter=40, eta0=0.01, random_state = 0) 
```

```python
ppn.fit(X_train_std, y_train)
```

# eta0
# n_iter
# shuffle : 每次迭代随机打乱训练集

Perceptron(alpha=0.0001, class_weight=None, eta0=0.01, fit_intercept=True,
      max_iter=None, n_iter=40, n_jobs=1, penalty=None, random_state=0,
      shuffle=True, tol=None, verbose=0, warm_start=False)

# 在测试集使用 predict() 进行预测

```python
y_pred = ppn.predict(X_test_std)
```

```python
# 误分类率：
print("Misclassified samples: %d" % (y_test!=y_pred).sum())
```

# 如果
Misclassified samples: 4
